{"version":3,"file":"static/js/134.ab76b3cd.chunk.js","mappings":"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","sources":["components/AirplaneMarker.js","components/LiveTracking.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { LeafletTrackingMarker } from \"react-leaflet-tracking-marker\";\r\nimport L, { Popup } from \"leaflet\";\r\n\r\nimport carIcon from \"../car.png\";\r\n\r\nconst icon = L.icon({\r\n  iconSize: [45, 45],\r\n  popupAnchor: [2, -20],\r\n  iconUrl:carIcon\r\n});\r\n\r\nexport default function AirplaneMarker({ data }) {\r\n  const { lat, lng } = data;\r\n  const [prevPos, setPrevPos] = useState([lat, lng]);\r\n\r\n  useEffect(() => {\r\n    if (prevPos[1] !== lng && prevPos[0] !== lat) setPrevPos([lat, lng]);\r\n  }, [lat, lng, prevPos]);\r\n\r\n  return (\r\n    <>\r\n      <LeafletTrackingMarker\r\n        icon={icon}\r\n        position={[lat, lng]}\r\n        previousPosition={prevPos}\r\n        duration={1000}\r\n        keepAtCenter={true}\r\n      ></LeafletTrackingMarker>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Polyline } from \"react-leaflet\";\r\nimport AirplaneMarker from \"./AirplaneMarker\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet/dist/leaflet.js\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Toolbar,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Container } from \"@mui/system\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nlet cursor = 0;\r\nexport default function LiveTracking() {\r\n  const [currentTrack, setCurrentTrack] = useState({\r\n    lat: 40.2974883,\r\n    lng: -82.2067383,\r\n  });\r\n  const [breach, setBreach] = useState(null);\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n  const [devices, setDevices] = useState([]);\r\n  const [dname, setDname] = useState(\"\");\r\n  const [time1, setTime1] = useState(null);\r\n  const [time2, setTime2] = useState(null);\r\n\r\n  const getDevices = async () => {\r\n    const devres = await axios({\r\n      method: \"post\",\r\n      url: \"http://54.226.199.64:8001/infinite/get_devices\",\r\n      headers: {\r\n        \"Content-Type\": \"application/octet-stream\",\r\n        \"x-token\": token,\r\n        \"x-user\": user,\r\n      },\r\n    });\r\n    setDevices(devres.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDevices();\r\n    const getDeviceLatLng = async () => {\r\n      const gpsres = await axios({\r\n        method: \"post\",\r\n        url: \"http://54.226.199.64:8001/infinite/get_gps\",\r\n        headers: {\r\n          \"Content-Type\": \"application/octet-stream\",\r\n          \"x-token\": token,\r\n          \"x-user\": user,\r\n        },\r\n        params: { device_id: dname, count: 1 },\r\n      });\r\n      \r\n      setCurrentTrack({ lat: gpsres.data[0].lat, lng: gpsres.data[0].long });\r\n      const timestamp1 = Date.parse(gpsres.data[0].ts);\r\n      console.log(timestamp1, \"time stamp1\");\r\n      setTime1(timestamp1);\r\n    };\r\n    const getGeofenceBreach = async () => {\r\n      const breachres = await axios({\r\n        method: \"post\",\r\n        url: \"http://54.226.199.64:8001/infinite/get_geofence_breach\",\r\n        headers: {\r\n          \"Content-Type\": \"application/octet-stream\",\r\n          \"x-token\": token,\r\n          \"x-user\": user,\r\n        },\r\n        params: { device_id: dname, count: 1 },\r\n      });\r\n\r\n      const timestamp2 = Date.parse(breachres.data[0].ts);\r\n      console.log(timestamp2, \"time stamp2\");\r\n      setTime2(timestamp2);\r\n      setBreach(breachres.data[0]);\r\n    };\r\n    const interval = setInterval(() => {\r\n      \r\n      getDeviceLatLng();\r\n      getGeofenceBreach();\r\n\r\n      if (time1 === time2) {\r\n        const date = new Date(time2);\r\n        const reversedTimestamp = date.toLocaleString();\r\n        toast(`${dname} crossed the geofence at ${reversedTimestamp}`);\r\n      }\r\n\r\n      /* if (cursor === geopoints.length - 1) {\r\n        cursor = 0;\r\n        setCurrentTrack(geopoints[cursor]);\r\n        return;\r\n      }\r\n    \r\n      cursor += 1;\r\n      setCurrentTrack(geopoints[cursor]); */\r\n    }, 5000);\r\n   \r\n    console.log(time1, time2);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [dname, time2]);\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setDname(e.target.value);\r\n    toast(`${e.target.value} Location Changed`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"main\"\r\n        sx={{\r\n          backgroundColor: (theme) =>\r\n            theme.palette.mode === \"light\"\r\n              ? theme.palette.grey[100]\r\n              : theme.palette.grey[900],\r\n          flexGrow: 1,\r\n          height: \"100vh\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        {\" \"}\r\n        <ToastContainer />\r\n        <Toolbar />\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper\r\n                sx={{\r\n                  p: 2,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"350\",\r\n                }}\r\n              >\r\n                <FormControl sx={{ m: 1, width: 200 }} size=\"small\">\r\n                  <InputLabel id=\"demo-select-small\">Select Device</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-select-small\"\r\n                    id=\"demo-select-small\"\r\n                    value={dname}\r\n                    label=\"Select Device\"\r\n                    size=\"small\"\r\n                    onChange={handleChange}\r\n                  >\r\n                    {devices.map((device) => {\r\n                      const { device_id, status } = device;\r\n\r\n                      return (\r\n                        <MenuItem value={device_id} key={device_id}>\r\n                          {device_id}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                <MapContainer\r\n                  style={{ height: \"calc(100vh - 52px)\" }}\r\n                  center={[40.2974883, -82.2067383]}\r\n                  zoom={17}\r\n                  minZoom={5}\r\n                >\r\n                  <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  />\r\n                  <AirplaneMarker data={currentTrack ?? {}} />\r\n                </MapContainer>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n"],"names":["icon","L","iconSize","popupAnchor","iconUrl","AirplaneMarker","data","lat","lng","useState","prevPos","setPrevPos","useEffect","position","previousPosition","duration","keepAtCenter","LiveTracking","currentTrack","setCurrentTrack","setBreach","token","localStorage","getItem","user","devices","setDevices","dname","setDname","time1","setTime1","time2","setTime2","getDevices","axios","method","url","headers","devres","getDeviceLatLng","params","device_id","count","gpsres","long","timestamp1","Date","parse","ts","console","log","getGeofenceBreach","breachres","timestamp2","interval","setInterval","reversedTimestamp","toLocaleString","toast","clearInterval","component","sx","backgroundColor","theme","palette","mode","grey","flexGrow","height","overflow","maxWidth","mt","mb","container","spacing","item","xs","p","display","flexDirection","m","width","size","id","labelId","value","label","onChange","e","preventDefault","target","map","device","status","style","center","zoom","minZoom","attribution"],"sourceRoot":""}