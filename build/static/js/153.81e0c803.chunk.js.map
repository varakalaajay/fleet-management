{"version":3,"file":"static/js/153.81e0c803.chunk.js","mappings":"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","sources":["pages/PageOne.js","pages/PageTwo.js","Dashboard.js","components/LiveTracking.js","../node_modules/@mui/system/esm/Container/Container.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { MapContainer as Map, Marker, useMap, TileLayer } from \"react-leaflet\";\r\nconst markerIcon = new L.Icon({\r\n    iconUrl: require(\"../../src/img/marker.png\"),\r\n    iconSize: [40, 40],\r\n    iconAnchor: [17, 46], //[left/right, top/bottom]\r\n    popupAnchor: [0, -46], //[left/right, top/bottom]\r\n  });\r\nconst AnimatedMarker = () => {\r\n  const [position, setPosition] = useState([51.505, -0.09]);\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    \r\n\r\n    const interval = setInterval(() => {\r\n      const newPosition = [\r\n        position[0] + Math.random() - 0.5,\r\n        position[1] + Math.random() - 0.5\r\n      ];\r\n      setPosition(newPosition);\r\n      map.locate().on(\"locationfound\", function (e) {\r\n        map.flyTo(position, map.getZoom());\r\n      });\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [position]);\r\n\r\n  return <Marker position={position} icon={markerIcon}></Marker>;\r\n};\r\n\r\nconst PageOne = () => {\r\n  return (\r\n    <Map center={[51.505, -0.09]} zoom={13} style={{ width: \"100%\", height: \"70vh\" }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"Map data &copy; OpenStreetMap contributors\"\r\n      />\r\n      <AnimatedMarker />\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default PageOne;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, Marker, Popup, useMap, TileLayer } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nconst markerIcon = new L.Icon({\r\n  iconUrl: require(\"../../src/img/marker.png\"),\r\n  iconSize: [40, 40],\r\n  iconAnchor: [17, 46], //[left/right, top/bottom]\r\n  popupAnchor: [0, -46], //[left/right, top/bottom]\r\n});\r\nfunction LiveTrackingMap() {\r\n  const [markerPosition, setMarkerPosition] = useState([36.505, -120.09]); // initial marker position\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    // fetch GPS data from backend service in real-time and update marker position\r\n    const interval = setInterval(() => {\r\n      // example code to update marker position\r\n      const newMarkerPosition = [\r\n        36.51 + Math.random() * 0.1,\r\n        -120.09 + Math.random() * 0.1,\r\n      ];\r\n      setMarkerPosition(newMarkerPosition);\r\n      map.locate().on(\"locationfound\", function (e) {\r\n        map.flyTo(markerPosition, map.getZoom());\r\n      });\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <Marker position={markerPosition} icon={markerIcon}>\r\n      <Popup>\r\n        A pretty CSS3 popup. <br /> Easily customizable.\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n}\r\n\r\nconst PageTwo = () => {\r\n  return (\r\n    <MapContainer\r\n      center={[51.505, -0.09]}\r\n      zoom={14}\r\n      style={{ width: \"100%\", height: \"70vh\" }}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"Map data &copy; OpenStreetMap contributors\"\r\n      />\r\n      <LiveTrackingMap />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default PageTwo;\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Footer from \"./Footer\";\r\nimport img2 from \"./img/dashboard.png\";\r\nimport { useMap } from \"react-leaflet/hooks\";\r\nimport { MapContainer } from \"react-leaflet/MapContainer\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet/dist/leaflet.js\";\r\nimport osm from \"./osm-providers\";\r\nimport L from \"leaflet\";\r\nimport {\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n  Tooltip,\r\n  useMapEvents,\r\n  ZoomControl,\r\n} from \"react-leaflet\";\r\nimport PageOne from \"./pages/PageOne\";\r\nimport LiveTrackingMap from \"./pages/PageTwo\";\r\nimport LiveTracking from \"./components/LiveTracking\";\r\n\r\nfunction MyComponent() {\r\n  const markerIcon = new L.Icon({\r\n    iconUrl: require(\"./img/marker.png\"),\r\n    iconSize: [40, 40],\r\n    iconAnchor: [17, 46], //[left/right, top/bottom]\r\n    popupAnchor: [0, -46], //[left/right, top/bottom]\r\n  });\r\n  const [position, setPosition] = React.useState(null);\r\n  const map = useMapEvents({\r\n    click() {\r\n      map.locate();\r\n    },\r\n    locationfound(e) {\r\n      setPosition(e.latlng);\r\n      map.flyTo(e.latlng, map.getZoom());\r\n    },\r\n  });\r\n  return position === null ? null : (\r\n    <Marker position={position} icon={markerIcon}>\r\n      <Popup>You are here\r\n      <b>Device ID :  </b> <br />\r\n                <b> TimeStamp :</b>\r\n      </Popup>      \r\n    </Marker>\r\n  );\r\n}\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <Box\r\n      component=\"main\"\r\n      sx={{\r\n        backgroundColor: (theme) =>\r\n          theme.palette.mode === \"light\"\r\n            ? theme.palette.grey[100]\r\n            : theme.palette.grey[900],\r\n        flexGrow: 1,\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n      }}\r\n    >\r\n      <Toolbar />\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n       {/*  <Grid\r\n          container\r\n          spacing={3}\r\n          sx={{\r\n            height: \"80vh\",\r\n          }}\r\n        >\r\n          <MapContainer\r\n            center={[36, -98]}\r\n            zoom={13}\r\n            style={{ width: \"100%\", height: \"70vh\" }}\r\n            scrollWheelZoom={true}\r\n            fadeAnimation={true}\r\n            markerZoomAnimation={true}\r\n          >\r\n            <TileLayer\r\n              url={osm.maptiler.url}\r\n              attribution={osm.maptiler.attribution}\r\n              opacity={0.5}\r\n              zIndex={10}\r\n            />\r\n            <ZoomControl position=\"bottomright\" />\r\n            <MyComponent />\r\n            \r\n          </MapContainer>\r\n        </Grid> */}\r\n        {/* <Grid\r\n          container\r\n          spacing={3}>          \r\n          <PageOne />\r\n          </Grid> */}\r\n        {/* <Grid\r\n          container\r\n          spacing={3}>          \r\n          <LiveTracking />\r\n          </Grid>\r\n        <Grid\r\n          container\r\n          spacing={3}>          \r\n          <LiveTrackingMap />\r\n          </Grid> */}\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          sx={{\r\n            backgroundImage: `url(${img2})`,\r\n            backgroundRepeat: \"no-repeat\",\r\n            height: \"80vh\",\r\n          }}\r\n        ></Grid>\r\n        <Footer sx={{ pt: 4 }} />\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, Polyline } from \"react-leaflet\";\r\nimport AirplaneMarker from \"./AirplaneMarker\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet/dist/leaflet.js\";\r\nimport { Box, FormControl, Grid, InputLabel, MenuItem, Paper, Select, Toolbar } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport { Container } from \"@mui/system\";\r\n\r\nlet cursor = 0;\r\nexport default function LiveTracking() {\r\n  const [currentTrack, setCurrentTrack] = useState({lat: 40.2974883, lng: -82.2067383});\r\n  const [breach, setBreach] = useState(null);\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n  const [devices, setDevices] = useState([]);\r\n  const [dname, setDname] = useState(\"\");\r\n\r\n  const getDevices = async () => {\r\n    const devres = await axios({\r\n      method: \"post\",\r\n      url: \"http://54.226.199.64:8001/infinite/get_devices\",\r\n      headers: {\r\n        \"Content-Type\": \"application/octet-stream\",\r\n        \"x-token\": token,\r\n        \"x-user\": user,\r\n      },\r\n    });\r\n    setDevices(devres.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDevices();\r\n    const interval = setInterval(() => {\r\n      const getDeviceLatLng = async () => {\r\n        const gpsres = await axios({\r\n          method: \"post\",\r\n          url: \"http://54.226.199.64:8001/infinite/get_gps\",\r\n          headers: {\r\n            \"Content-Type\": \"application/octet-stream\",\r\n            \"x-token\": token,\r\n            \"x-user\": user,\r\n          },\r\n          params: { device_id: dname, count: 1 },\r\n        });\r\n        setCurrentTrack({ lat: gpsres.data[0].lat, lng: gpsres.data[0].long });\r\n      };\r\n      const getGeofenceBreach = async () => {\r\n        const breachres = await axios({\r\n          method: \"post\",\r\n          url: \"http://54.226.199.64:8001/infinite/get_geofence_breach\",\r\n          headers: {\r\n            \"Content-Type\": \"application/octet-stream\",\r\n            \"x-token\": token,\r\n            \"x-user\": user,\r\n          },\r\n          params: { device_id: dname, count: 1 },\r\n        });\r\n        setBreach(breachres.data[0]);      \r\n        \r\n      };\r\n\r\n      getDeviceLatLng();\r\n      getGeofenceBreach();\r\n      console.log(breach)\r\n      /* if (cursor === geopoints.length - 1) {\r\n        cursor = 0;\r\n        setCurrentTrack(geopoints[cursor]);\r\n        return;\r\n      }\r\n    \r\n      cursor += 1;\r\n      setCurrentTrack(geopoints[cursor]); */\r\n    }, 5000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [dname]);\r\n\r\n  const handleChange = (e)=>{\r\n    e.preventDefault();\r\n    setDname(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"main\"\r\n        sx={{\r\n          backgroundColor: (theme) =>\r\n            theme.palette.mode === \"light\"\r\n              ? theme.palette.grey[100]\r\n              : theme.palette.grey[900],\r\n          flexGrow: 1,\r\n          height: \"100vh\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper\r\n                sx={{\r\n                  p: 2,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"350\",\r\n                }}\r\n              > \r\n              <FormControl sx={{ m: 1, width: 200 }} size=\"small\">\r\n                  <InputLabel id=\"demo-select-small\">Select Device</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-select-small\"\r\n                    id=\"demo-select-small\"\r\n                    value={dname}\r\n                    label=\"Select Device\"\r\n                    size=\"small\"\r\n                    onChange={handleChange}\r\n                  >\r\n                    {devices.map((device) => {\r\n                      const { device_id, status } = device;\r\n\r\n                      return (\r\n                        <MenuItem value={device_id} key={device_id}>\r\n                          {device_id}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n                <MapContainer\r\n                  style={{ height: \"calc(100vh - 52px)\" }}\r\n                  center={[40.2974883, -82.2067383]}\r\n                  zoom={17}\r\n                  minZoom={5}\r\n                >\r\n                  <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  />\r\n                  <AirplaneMarker data={currentTrack ?? {}} />\r\n                </MapContainer>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\nimport createContainer from './createContainer';\n\n/**\n *\n * Demos:\n *\n * - [Container (Material UI)](https://mui.com/material-ui/react-container/)\n * - [Container (MUI System)](https://mui.com/system/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/system/api/container/)\n */\nconst Container = createContainer();\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["L","iconUrl","require","iconSize","iconAnchor","popupAnchor","Box","component","sx","backgroundColor","theme","palette","mode","grey","flexGrow","height","overflow","Toolbar","Container","maxWidth","mt","mb","Grid","container","spacing","backgroundImage","img2","backgroundRepeat","Footer","pt","LiveTracking","useState","lat","lng","currentTrack","setCurrentTrack","breach","setBreach","token","localStorage","getItem","user","devices","setDevices","dname","setDname","getDevices","axios","method","url","headers","devres","data","useEffect","interval","setInterval","getDeviceLatLng","params","device_id","count","gpsres","long","getGeofenceBreach","breachres","console","log","clearInterval","item","xs","p","display","flexDirection","m","width","size","id","labelId","value","label","onChange","e","preventDefault","target","map","device","status","style","center","zoom","minZoom","attribution","createContainer"],"sourceRoot":""}