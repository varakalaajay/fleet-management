{"version":3,"file":"static/js/978.cc18cf15.chunk.js","mappings":"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","sources":["Footer.js","draw.js","osm-providers.js"],"sourcesContent":["import { Link, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"https://infinite.com/\">\r\n        Infinite\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, FeatureGroup, Polygon } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport osm from \"./osm-providers\";\r\nimport { useRef } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet-draw/dist/leaflet.draw.css\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@mui/material\";\r\n\r\nimport swal from \"sweetalert\";\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  iconUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  shadowUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\",\r\n});\r\n\r\nconst DrawMap = () => {\r\n  const [center, setCenter] = useState({ lat: 37.350768, lng: -121.889488 });\r\n  const [mapLayers, setMapLayers] = useState([]);\r\n  const ZOOM_LEVEL = 6;\r\n  const mapRef = useRef();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n  const [devices, setDevices] = useState([]);\r\n  const [location, setLocation] = useState({});\r\n  const [position, setPosition] = useState([17.45, 78.38]);\r\n  const [dname, setDname] = useState(\"\");\r\n  const [params, setParams] = useState({});\r\n\r\n  const getDevices = async () => {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"http://174.138.121.17:8001/infinite/get_devices\",\r\n      headers: {\r\n        \"Content-Type\": \"application/octet-stream\",\r\n        \"x-token\": token,\r\n        \"x-user\": user,\r\n      },\r\n    });\r\n    setDevices(res.data);\r\n  };\r\n  useEffect(() => {\r\n    getDevices();\r\n  }, []);\r\n\r\n  const handleSubmit = (event) => {\r\n    console.log(event.target.value);\r\n    const setGeofence = async () => {\r\n      const res = await axios.post(\r\n        \"http://174.138.121.17:8001/infinite/set_geofence\",\r\n        params,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-token\": token,\r\n            \"x-user\": user,\r\n          },\r\n          params: { device_id: dname, ref_id: 3 },\r\n        }\r\n      );\r\n      swal({\r\n        text: res.data,\r\n        icon: \"success\",\r\n        type: \"success\",\r\n      });\r\n      setDname(\"\");\r\n      setMapLayers([]);\r\n    };\r\n\r\n    setGeofence();\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setDname(event.target.value);\r\n    const getDeviceLatLng = async () => {\r\n      const res = await axios({\r\n        method: \"post\",\r\n        url: \"http://174.138.121.17:8001/infinite/get_gps\",\r\n        headers: {\r\n          \"Content-Type\": \"application/octet-stream\",\r\n          \"x-token\": token,\r\n          \"x-user\": user,\r\n        },\r\n        params: { device_id: event.target.value },\r\n      });\r\n      setCenter({ lat: res.data.lat, lng: res.data.long });\r\n      setPosition([res.data.lat, res.data.long]);\r\n      setLocation(res.data);\r\n    };\r\n    getDeviceLatLng();\r\n  };\r\n\r\n  const _onCreate = (e) => {\r\n    const { layerType, layer } = e;\r\n\r\n    const data = layer.getLatLngs()[0];\r\n    const points = data.reduce((acc, currentValue, currentIndex) => {\r\n      acc[\r\n        `point${currentIndex + 1}`\r\n      ] = `(${currentValue.lat}, ${currentValue.lng})`;\r\n      return acc;\r\n    }, {});\r\n\r\n    setParams(JSON.stringify(points));\r\n\r\n    if (layerType === \"polygon\") {\r\n      const { _leaflet_id } = layer;\r\n\r\n      setMapLayers(points);\r\n    }\r\n  };\r\n\r\n  const _onEdited = (e) => {\r\n    console.log(e);\r\n    const { layerType, layer } = e;\r\n\r\n    const data = layer.getLatLngs()[0];\r\n    const points = data.reduce((acc, currentValue, currentIndex) => {\r\n      acc[\r\n        `point${currentIndex + 1}`\r\n      ] = `(${currentValue.lat}, ${currentValue.lng})`;\r\n      return acc;\r\n    }, {});\r\n\r\n    setParams(JSON.stringify(points));\r\n\r\n    setMapLayers(points);\r\n  };\r\n\r\n  const _onDeleted = (e) => {\r\n    console.log(e);\r\n    const {\r\n      layers: { _layers },\r\n    } = e;\r\n\r\n    Object.values(_layers).map(({ _leaflet_id }) => {\r\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"main\"\r\n        sx={{\r\n          backgroundColor: (theme) =>\r\n            theme.palette.mode === \"light\"\r\n              ? theme.palette.grey[100]\r\n              : theme.palette.grey[900],\r\n          flexGrow: 1,\r\n          height: \"100vh\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper\r\n                sx={{\r\n                  p: 2,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"350\",\r\n                }}\r\n              >\r\n                <Box component=\"form\" noValidate sx={{ mt: 1 }}>\r\n                  <FormControl sx={{ m: 1, minWidth: 200 }} size=\"small\">\r\n                    <InputLabel id=\"demo-select-small\">\r\n                      Select Device\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-select-small\"\r\n                      id=\"demo-select-small\"\r\n                      value={dname}\r\n                      label=\"Select Device\"\r\n                      size=\"small\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      {devices.map((device) => {\r\n                        return (\r\n                          <MenuItem value={device.device_id}>\r\n                            {device.device_id}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    sx={{ mt: 1 }}\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Box>\r\n                <MapContainer\r\n                  style={{ width: \"100%\", height: \"70vh\" }}\r\n                  center={center}\r\n                  zoom={ZOOM_LEVEL}\r\n                  ref={mapRef}\r\n                >\r\n                  <FeatureGroup>\r\n                    <EditControl\r\n                      position=\"topright\"\r\n                      onCreated={_onCreate}\r\n                      draw={{\r\n                        rectangle: false,\r\n                        polyline: false,\r\n                        circle: false,\r\n                        circlemarker: false,\r\n                        marker: false,\r\n                      }}\r\n                    />\r\n                  </FeatureGroup>\r\n                  <TileLayer\r\n                    url={osm.maptiler.url}\r\n                    attribution={osm.maptiler.attribution}\r\n                  />\r\n                 \r\n                </MapContainer>\r\n                {/* <pre className=\"text-left\">\r\n                  {JSON.stringify(mapLayers, 0, 2)}\r\n                </pre> */}\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Footer sx={{ pt: 4 }} />\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DrawMap;\r\n","export default {\r\n  maptiler: {\r\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n    attribution:\r\n      '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n  },\r\n};\r\n"],"names":["props","variant","color","align","href","Date","getFullYear","L","iconRetinaUrl","iconUrl","shadowUrl","useState","lat","lng","center","setCenter","setMapLayers","mapRef","useRef","token","localStorage","getItem","user","devices","setDevices","setLocation","setPosition","dname","setDname","params","setParams","getDevices","axios","method","url","headers","res","data","useEffect","component","sx","backgroundColor","theme","palette","mode","grey","flexGrow","height","overflow","maxWidth","mt","mb","container","spacing","item","xs","p","display","flexDirection","noValidate","m","minWidth","size","id","labelId","value","label","onChange","event","target","getDeviceLatLng","device_id","long","map","device","onClick","console","log","setGeofence","ref_id","swal","text","icon","type","style","width","zoom","ref","position","onCreated","e","layerType","layer","points","getLatLngs","reduce","acc","currentValue","currentIndex","JSON","stringify","_leaflet_id","draw","rectangle","polyline","circle","circlemarker","marker","osm","attribution","pt","maptiler"],"sourceRoot":""}