{"version":3,"file":"static/js/256.a5034ec3.chunk.js","mappings":"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","sources":["Devices.js","AddDevice.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport axios from \"axios\";\r\nimport { Paper, Typography } from \"@mui/material\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nfunction Devices() {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n\r\n  const [devices, setDevices] = useState([]);\r\n\r\n  useEffect(() => {\r\n    \r\n      axios({\r\n        method: 'post',\r\n        url: 'http://174.138.121.17:8001/infinite/get_devices',\r\n        headers: { 'Content-Type': 'application/octet-stream', 'x-token' : token, 'x-user': user },\r\n        params: { 'device_id': 'Device03' },\r\n        \r\n    })\r\n      .then((res) => {\r\n        setDevices(res.data);\r\n        console.log(res.data);\r\n      })\r\n      .catch((err) => {\r\n        if (err) {\r\n          swal({\r\n            text: err,\r\n            icon: \"error\",\r\n            type: \"error\",\r\n          });\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"device_id\", headerName: \"Device ID\", width: 150 },\r\n    { field: \"type\", headerName: \"Type\", width: 130 },\r\n    { field: \"status\", headerName: \"Status\", width: 130 },\r\n    { field: \"createdAt\", headerName: \"Created At\", width: 160 },\r\n  ];\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        p: 2,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"350\",\r\n      }}\r\n    >\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        List of Devices\r\n      </Typography>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={devices}\r\n          columns={columns}\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n        />\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Devices;\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport { Button, TextField, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport axios from \"axios\";\r\nimport Devices from \"./Devices\";\r\n\r\n\r\nfunction AddDevice() {\r\n  const [deviceID, setDeviceID] = React.useState(\"\");\r\n  const [type, setType] = React.useState(\"\");\r\n  const navigate = useNavigate();\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n\r\n  const handleAdd = (event) => {\r\n    event.preventDefault();\r\n    //const data = new FormData(event.currentTarget);\r\n    //const pwd = bcrypt.hashSync(password, salt);\r\n    axios\r\n      .post(\r\n        \"http://174.138.121.17:8001/infinite/add_device\",\r\n        {\r\n          device_id: deviceID,\r\n          type: type,\r\n          status: \"ENABLED\",\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-token\": token,\r\n            \"x-user\": user,\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        swal({\r\n          text: res.data,\r\n          icon: \"success\",\r\n          type: \"success\",\r\n        });\r\n        setDeviceID(\"\");\r\n        setType(\"\");\r\n        navigate(\"/add-device\");\r\n      })\r\n      .catch((err) => {\r\n        if (\r\n          err.response &&\r\n          err.response.data &&\r\n          err.response.data.errorMessage\r\n        ) {\r\n          swal({\r\n            text: err.response.data.errorMessage,\r\n            icon: \"error\",\r\n            type: \"error\",\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    \r\n        <Box\r\n          component=\"main\"\r\n          sx={{\r\n            backgroundColor: (theme) =>\r\n              theme.palette.mode === \"light\"\r\n                ? theme.palette.grey[100]\r\n                : theme.palette.grey[900],\r\n            flexGrow: 1,\r\n            height: \"100vh\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <Toolbar />\r\n          <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Grid container spacing={3}>\r\n          <Grid item xs={5}>\r\n                <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    height: \"350\",\r\n                  }}\r\n                >\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Add Device\r\n            </Typography>\r\n            <Box\r\n              component=\"form\"\r\n              noValidate\r\n              onSubmit={handleAdd}\r\n              sx={{ mt: 1 }}\r\n            >\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Device ID\"\r\n                type=\"text\"\r\n                id=\"device_id\"\r\n                name=\"deviceid\"\r\n                value={deviceID}\r\n                onChange={(e) => setDeviceID(e.target.value)}\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"type\"\r\n                value={type}\r\n                onChange={(e) => setType(e.target.value)}\r\n                label=\"Type\"\r\n                type=\"text\"\r\n                id=\"type\"\r\n                autoComplete=\"off\"\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2 }}\r\n              >\r\n                Register Device\r\n              </Button>\r\n            </Box>\r\n            </Paper>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n               <Devices />\r\n            </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </Box>\r\n      \r\n  );\r\n}\r\n\r\nexport default AddDevice;\r\n"],"names":["token","localStorage","getItem","user","useState","devices","setDevices","useEffect","axios","method","url","headers","params","then","res","data","console","log","catch","err","swal","text","icon","type","Paper","sx","p","display","flexDirection","height","Typography","component","variant","style","width","DataGrid","rows","columns","field","headerName","pageSize","rowsPerPageOptions","React","deviceID","setDeviceID","setType","navigate","useNavigate","Box","backgroundColor","theme","palette","mode","grey","flexGrow","overflow","Toolbar","Container","maxWidth","mt","mb","Grid","container","spacing","item","xs","noValidate","onSubmit","event","preventDefault","device_id","status","response","errorMessage","TextField","margin","required","fullWidth","label","id","name","value","onChange","e","target","autoComplete","autoFocus","Button"],"sourceRoot":""}