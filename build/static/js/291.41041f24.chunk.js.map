{"version":3,"file":"static/js/291.41041f24.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/Marker.js","../node_modules/react-leaflet/lib/Popup.js","SpotDevice.js","osm-providers.js"],"sourcesContent":["import { createElementObject, createLayerComponent, extendContext } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({ position , ...options }, ctx) {\n    const marker = new LeafletMarker(position, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, function updateMarker(marker, props, prevProps) {\n    if (props.position !== prevProps.position) {\n        marker.setLatLng(props.position);\n    }\n    if (props.icon != null && props.icon !== prevProps.icon) {\n        marker.setIcon(props.icon);\n    }\n    if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n        marker.setZIndexOffset(props.zIndexOffset);\n    }\n    if (props.opacity != null && props.opacity !== prevProps.opacity) {\n        marker.setOpacity(props.opacity);\n    }\n    if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n        if (props.draggable === true) {\n            marker.dragging.enable();\n        } else {\n            marker.dragging.disable();\n        }\n    }\n});\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n    const popup = new LeafletPopup(props, context.overlayContainer);\n    return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addPopup() {\n        const { instance  } = element;\n        function onPopupOpen(event) {\n            if (event.popup === instance) {\n                instance.update();\n                setOpen(true);\n            }\n        }\n        function onPopupClose(event) {\n            if (event.popup === instance) {\n                setOpen(false);\n            }\n        }\n        context.map.on({\n            popupopen: onPopupOpen,\n            popupclose: onPopupClose\n        });\n        if (context.overlayContainer == null) {\n            // Attach to a Map\n            if (position != null) {\n                instance.setLatLng(position);\n            }\n            instance.openOn(context.map);\n        } else {\n            // Attach to container component\n            context.overlayContainer.bindPopup(instance);\n        }\n        return function removePopup() {\n            context.map.off({\n                popupopen: onPopupOpen,\n                popupclose: onPopupClose\n            });\n            context.overlayContainer?.unbindPopup();\n            context.map.removeLayer(instance);\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  MapContainer,\r\n  Marker,\r\n  TileLayer,\r\n  Map,\r\n  Popup,\r\n  CircleMarker,\r\n} from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport osm from \"./osm-providers\";\r\n\r\nimport cities from \"./cities.json\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst markerIcon = new L.Icon({\r\n  iconUrl: require(\"./img/marker.png\"),\r\n  iconSize: [40, 40],\r\n  iconAnchor: [17, 46], //[left/right, top/bottom]\r\n  popupAnchor: [0, -46], //[left/right, top/bottom]\r\n});\r\n\r\nfunction SpotDevice() {\r\n  const [center, setCenter] = useState({ lat: 36.23, lng: -98.38 });\r\n  const ZOOM_LEVEL = 5;\r\n  const mapRef = useRef();  \r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n  const [devices, setDevices] = useState([]);\r\n  const [location, setLocation] = useState({});\r\n  const [dname, setDname] = useState('');\r\n\r\n  useEffect(()=>{\r\n    axios({\r\n      method: 'post',\r\n      url: 'http://174.138.121.17:8001/infinite/get_devices',\r\n      headers: { 'Content-Type': 'application/octet-stream', 'x-token' : token, 'x-user': user },\r\n      params: { 'device_id': 'Device03' },\r\n      \r\n  })\r\n    .then((res) => {\r\n      setDevices(res.data);\r\n      \r\n    })\r\n  },[])\r\n  \r\n\r\n  const [position, setPosition] = useState([17.45, 78.38]);\r\n  const handleChange = (event) => {\r\n    setDname(event.target.value);\r\n    axios({\r\n      method: 'post',\r\n      url: 'http://174.138.121.17:8001/infinite/get_gps',\r\n      headers: { 'Content-Type': 'application/octet-stream', 'x-token' : token, 'x-user': user },\r\n      params: { 'device_id': event.target.value },\r\n      \r\n  })\r\n    .then((res) => {\r\n      setCenter({ lat: res.data.lat, lng: res.data.long });\r\n      setPosition([res.data.lat, res.data.long]);  \r\n      setLocation(res.data);   \r\n      console.log(res.data)\r\n    })\r\n  };\r\n  /* const map = L.map(\"map\").setView([40.725, -73.985], 13);\r\n  map.on(\"click\", function (e) {\r\n    L.esri.Geocoding\r\n      .reverseGeocode({\r\n        apikey: \"\"\r\n      })\r\n      .latlng(e.latlng)\r\n      .run(function (error, result) {\r\n        if (error) {\r\n          return;\r\n        }\r\n\r\n        L.marker(result.latlng).addTo(map).bindPopup(result.address.Match_addr).openPopup();\r\n      });\r\n  }); */\r\n\r\n  return (\r\n    <Box\r\n      component=\"main\"\r\n      sx={{\r\n        backgroundColor: (theme) =>\r\n          theme.palette.mode === \"light\"\r\n            ? theme.palette.grey[100]\r\n            : theme.palette.grey[900],\r\n        flexGrow: 1,\r\n        height: \"100vh\",\r\n        overflow: \"auto\",\r\n      }}\r\n    >\r\n      <Toolbar />\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Grid container spacing={3}>\r\n          {/* Chart */}\r\n\r\n          <Grid item xs={12}>\r\n            <Paper\r\n              sx={{\r\n                p: 2,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                height: \"350\",\r\n              }}\r\n            >\r\n              <Box component=\"form\" noValidate sx={{ mt: 1 }}>\r\n                <FormControl sx={{ m: 1, minWidth: 200 }} size=\"small\">\r\n                  <InputLabel id=\"demo-select-small\">Select Device</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-select-small\"\r\n                    id=\"demo-select-small\"\r\n                    value={dname}\r\n                    label=\"Select Device\"\r\n                    onChange={handleChange}\r\n                  >\r\n                    { devices.map((device)=>{\r\n                      return(<MenuItem value={ device.device_id }>\r\n                      { device.device_id }\r\n                    </MenuItem>)\r\n                    })}\r\n                    \r\n                  </Select>\r\n                </FormControl>\r\n                  <Button variant=\"outlined\" sx={{ mt: 1}}>Active</Button>\r\n              </Box>\r\n              <MapContainer style={{ width: \"100%\", height: \"70vh\" }} center={center} zoom={ZOOM_LEVEL} ref={mapRef}>\r\n              <TileLayer\r\n                url={osm.maptiler.url}\r\n                attribution={osm.maptiler.attribution}\r\n              />\r\n              \r\n              <Marker\r\n                  position={position}\r\n                  icon={markerIcon}\r\n                >\r\n                  <Popup>\r\n                    <b>\r\n                      Device ID :  {location.device_id} </b> <br/>\r\n                     <b> TimeStamp : { location.timestamp }\r\n                    </b>\r\n                  </Popup>\r\n                </Marker>\r\n\r\n              {cities.map((city, idx) => (\r\n                <Marker\r\n                  position={[city.lat, city.lng]}\r\n                  icon={markerIcon}\r\n                  key={idx}\r\n                >\r\n                  <Popup>\r\n                    <b>\r\n                      {city.city}\r\n                    </b>\r\n                  </Popup>\r\n                </Marker>\r\n              ))}\r\n            </MapContainer>\r\n              {/* <MapContainer\r\n                style={{ width: \"100%\", height: \"60vh\" }}\r\n                zoom={7}\r\n                center={position}\r\n                scrollWheelZoom={true}\r\n                fadeAnimation={true}\r\n                markerZoomAnimation={true}\r\n              >\r\n                <TileLayer\r\n                  attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <Marker position={position}>\r\n                  <Popup>\r\n                    Device01 <br />\r\n                    speed : 48kph\r\n                    <br />\r\n                    status: Enabled\r\n                  </Popup>\r\n                </Marker>\r\n              </MapContainer> */}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Footer sx={{ pt: 4 }} />\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SpotDevice;\r\n","export default {\r\n    maptiler: {\r\n        url:\r\n            \"https://api.maptiler.com/maps/basic/256/{z}/{x}/{y}.png?key=fXmTwJM642uPLZiwzhA1\",\r\n        attribution:\r\n            '&copy; <a href=\"https://www.maptiler.com/\">MapTiler</a> &copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n    },\r\n};\r\n"],"names":["Marker","createLayerComponent","ctx","position","options","marker","LeafletMarker","createElementObject","extendContext","overlayContainer","props","prevProps","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable","Popup","createOverlayComponent","context","popup","LeafletPopup","element","setOpen","useEffect","instance","onPopupOpen","event","update","onPopupClose","map","on","popupopen","popupclose","openOn","bindPopup","off","unbindPopup","removeLayer","markerIcon","L","iconUrl","require","iconSize","iconAnchor","popupAnchor","useState","lat","lng","center","setCenter","mapRef","useRef","token","localStorage","getItem","user","devices","setDevices","location","setLocation","dname","setDname","axios","method","url","headers","params","then","res","data","setPosition","Box","component","sx","backgroundColor","theme","palette","mode","grey","flexGrow","height","overflow","Toolbar","Container","maxWidth","mt","mb","Grid","container","spacing","item","xs","Paper","p","display","flexDirection","noValidate","FormControl","m","minWidth","size","InputLabel","id","Select","labelId","value","label","onChange","target","long","console","log","device","MenuItem","device_id","Button","variant","MapContainer","style","width","zoom","ref","TileLayer","osm","attribution","timestamp","cities","city","idx","Footer","pt","maptiler"],"sourceRoot":""}