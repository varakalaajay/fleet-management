{"version":3,"file":"static/js/41.4ff39cbb.chunk.js","mappings":"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","sources":["Footer.js","../node_modules/react-leaflet/lib/Polygon.js","GetGeofence.js","osm-providers.js"],"sourcesContent":["import { Link, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"https://infinite.com/\">\r\n        Infinite\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polygon as LeafletPolygon } from 'leaflet';\nexport const Polygon = createPathComponent(function createPolygon({ positions , ...options }, ctx) {\n    const polygon = new LeafletPolygon(positions, options);\n    return createElementObject(polygon, extendContext(ctx, {\n        overlayContainer: polygon\n    }));\n}, function updatePolygon(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, FeatureGroup, Polygon } from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport osm from \"./osm-providers\";\r\nimport { useRef } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"leaflet-draw/dist/leaflet.draw.css\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@mui/material\";\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  iconUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  shadowUrl:\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\",\r\n});\r\n\r\n/* var map = L.map('map').setView([51.505, -0.09], 13);\r\n     L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\r\n         attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n     }).addTo(map);\r\n     // FeatureGroup is to store editable layers\r\n     var drawnItems = new L.FeatureGroup();\r\n     map.addLayer(drawnItems);\r\n     var drawControl = new L.Control.Draw({\r\n         edit: {\r\n             featureGroup: drawnItems\r\n         }\r\n     });\r\n     map.addControl(drawControl); */\r\n\r\nconst GetGeofence = () => {\r\n  const [center, setCenter] = useState({ lat: 37.350768, lng: -121.889488 });\r\n  const [mapLayers, setMapLayers] = useState([]);\r\n  const ZOOM_LEVEL = 6;\r\n  const mapRef = useRef();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const user = localStorage.getItem(\"user\");\r\n  const [devices, setDevices] = useState([]);\r\n  const [location, setLocation] = useState({});\r\n  const [position, setPosition] = useState([17.45, 78.38]);\r\n  const [dname, setDname] = useState(null);\r\n\r\n\r\n  const [polygons, setPolygons] = useState([]);\r\n\r\n  const onEdited = (layers) => {\r\n    //polygons that are changed are stored in changedPolys array\r\n    const changedPolys = Object.values(layers._layers).map((layer) => {\r\n      const latlngs = layer._latlngs[0].map((latlng) => {\r\n        return [latlng.lat, latlng.lng];\r\n      });\r\n      return { id: layer.options.id, latlngs: latlngs };\r\n    });\r\n    \r\n    console.log(changedPolys);\r\n    debugger;\r\n    //update state of all the polygons. replace polygons with changedPolys\r\n    changedPolys.forEach((changedPoly) => {\r\n      setPolygons((polygons) => {\r\n        return polygons.map((polygon) => {\r\n          if (polygon.id === changedPoly.id) {\r\n            return { id: changedPoly.id, latlngs: changedPoly.latlngs };\r\n          }          \r\n          return polygon;\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  const getDevices = async () => {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"http://174.138.121.17:8001/infinite/get_devices\",\r\n      headers: {\r\n        \"Content-Type\": \"application/octet-stream\",\r\n        \"x-token\": token,\r\n        \"x-user\": user,\r\n      },\r\n    });\r\n    setDevices(res.data);\r\n  };\r\n  useEffect(() => {\r\n    getDevices();\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    setDname(event.target.value);\r\n    const getGeofenceLatLng = async () => {\r\n      const { data } = await axios({\r\n        method: \"post\",\r\n        url: \"http://174.138.121.17:8001/infinite/get_geofence\",\r\n        headers: {\r\n          \"Content-Type\": \"application/octet-stream\",\r\n          \"x-token\": token,\r\n          \"x-user\": user,\r\n        },\r\n        params: { device_id: event.target.value },\r\n      });\r\n      const result = Object.values(data).map((coords) => {\r\n        return coords.slice(1, -1).split(\", \").map(Number);\r\n      });\r\n\r\n      setPolygons([{\r\n        id: 1,\r\n        latlngs: result,\r\n      }]);\r\n    };\r\n    getGeofenceLatLng();\r\n  };\r\n\r\n  const _onCreate = (e) => {\r\n    console.log(e);\r\n\r\n    const { layerType, layer } = e;\r\n    console.log(layer);\r\n    if (layerType === \"polygon\") {\r\n      const { _leaflet_id } = layer;\r\n\r\n      setMapLayers((layers) => [\r\n        ...layers,\r\n        { id: _leaflet_id, latlngs: layer.getLatLngs()[0] },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const _onEdited = (e) => {\r\n    console.log(e);\r\n    const {\r\n      layers: { _layers },\r\n    } = e;\r\n\r\n    Object.values(_layers).map(({ _leaflet_id, editing }) => {\r\n      setMapLayers((layers) =>\r\n        layers.map((l) =>\r\n          l.id === _leaflet_id\r\n            ? { ...l, latlngs: { ...editing.latlngs[0] } }\r\n            : l\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  const _onDeleted = (e) => {\r\n    console.log(e);\r\n    const {\r\n      layers: { _layers },\r\n    } = e;\r\n\r\n    Object.values(_layers).map(({ _leaflet_id }) => {\r\n      setMapLayers((layers) => layers.filter((l) => l.id !== _leaflet_id));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"main\"\r\n        sx={{\r\n          backgroundColor: (theme) =>\r\n            theme.palette.mode === \"light\"\r\n              ? theme.palette.grey[100]\r\n              : theme.palette.grey[900],\r\n          flexGrow: 1,\r\n          height: \"100vh\",\r\n          overflow: \"auto\",\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper\r\n                sx={{\r\n                  p: 2,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"350\",\r\n                }}\r\n              >\r\n                <Box component=\"form\" noValidate sx={{ mt: 1 }}>\r\n                  <FormControl sx={{ m: 1, minWidth: 200 }} size=\"small\">\r\n                    <InputLabel id=\"demo-select-small\">\r\n                      Select Device\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-select-small\"\r\n                      id=\"demo-select-small\"\r\n                      value={dname}\r\n                      label=\"Select Device\"\r\n                      size=\"small\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      {devices.map((device) => {\r\n                        return (\r\n                          <MenuItem\r\n                            value={device.device_id}\r\n                            key={device.device_id}\r\n                          >\r\n                            {device.device_id}\r\n                          </MenuItem>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                 {/*  <Button variant=\"contained\" color=\"success\" sx={{ mt: 1 }}>\r\n                    Submit\r\n                  </Button> */}\r\n                </Box>\r\n\r\n                {dname === null ? null : (\r\n                  <MapContainer\r\n                    style={{ width: \"100%\", height: \"70vh\" }}\r\n                    center={center}\r\n                    zoom={ZOOM_LEVEL}\r\n                    ref={mapRef}\r\n                  >\r\n                    <FeatureGroup>\r\n                      <EditControl\r\n                        position=\"topright\"\r\n                        onCreated={_onCreate}\r\n                        onEdited={(e) => onEdited(e.layers)}\r\n                        onDeleted={_onDeleted}\r\n                        draw={{\r\n                          rectangle: false,\r\n                          polyline: false,\r\n                          circle: false,\r\n                          circlemarker: false,\r\n                          marker: false,\r\n                        }}\r\n                      />\r\n\r\n                      {polygons?.map((polygon) => {\r\n                        return (\r\n                          <Polygon\r\n                            key={polygon.id}\r\n                            id={polygon.id}\r\n                            positions={polygon.latlngs}\r\n                            pathOptions={{\r\n                              color: polygon.id === 1 ? \"red\" : \"blue\",\r\n                            }}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </FeatureGroup>\r\n                    <TileLayer\r\n                      url={osm.maptiler.url}\r\n                      attribution={osm.maptiler.attribution}\r\n                    />\r\n                  </MapContainer>\r\n                )}\r\n              </Paper>\r\n              {/* <pre className=\"text-left\">\r\n                  {JSON.stringify(mapLayers, 0, 2)}\r\n                </pre> */}\r\n            </Grid>\r\n          </Grid>\r\n          <Footer sx={{ pt: 4 }} />\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetGeofence;\r\n","export default {\r\n  maptiler: {\r\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n    attribution:\r\n      '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n  },\r\n};\r\n"],"names":["props","variant","color","align","href","Date","getFullYear","Polygon","createPathComponent","ctx","positions","options","polygon","LeafletPolygon","createElementObject","extendContext","overlayContainer","layer","prevProps","setLatLngs","L","iconRetinaUrl","iconUrl","shadowUrl","useState","lat","lng","center","setMapLayers","mapRef","useRef","token","localStorage","getItem","user","devices","setDevices","dname","setDname","polygons","setPolygons","getDevices","axios","method","url","headers","res","data","useEffect","Box","component","sx","backgroundColor","theme","palette","mode","grey","flexGrow","height","overflow","Toolbar","Container","maxWidth","mt","mb","Grid","container","spacing","item","xs","Paper","p","display","flexDirection","noValidate","FormControl","m","minWidth","size","InputLabel","id","Select","labelId","value","label","onChange","event","target","getGeofenceLatLng","params","device_id","result","Object","values","map","coords","slice","split","Number","latlngs","device","MenuItem","MapContainer","style","width","zoom","ref","FeatureGroup","position","onCreated","e","console","log","layerType","_leaflet_id","layers","getLatLngs","onEdited","changedPolys","_layers","_latlngs","latlng","forEach","changedPoly","onDeleted","filter","l","draw","rectangle","polyline","circle","circlemarker","marker","pathOptions","TileLayer","osm","attribution","Footer","pt","maptiler"],"sourceRoot":""}